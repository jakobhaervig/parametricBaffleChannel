/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2412                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

castellatedMesh true;
snap            true;
addLayers       false;

geometry
{
    baffles
    {
        type triSurfaceMesh;
        file "baffles.stl";
    }
};


castellatedMeshControls
{
    maxLocalCells 1000000;
    maxGlobalCells 20000000;
    minRefinementCells 0;
    maxLoadUnbalance 0.10;
    nCellsBetweenLevels 3;
    features
    (

    );

    refinementSurfaces
    {
        baffles
        {
            level (2 2);
            faceZone baffles_facezone;
        }
    }

    resolveFeatureAngle 30;
    planarAngle 30;
    refinementRegions
    {
        baffles
        {                             // refinement level 5 within 1.0 m
            mode distance;            // refinement level 3 within 2.0 m
            levels ((0.0005 4) (0.001 3) (0.002 2) (0.005 1)); // levels must be ordered nearest first
        }
    }

    // Optionally limit refinement in geometric region. This limits all
    // refinement (from features, refinementSurfaces, refinementRegions)
    // in a given geometric region. The syntax is exactly the same as for the
    // refinementRegions; the cell level now specifies the upper limit
    // for any cell. (a special setting is cell level -1 which will remove
    // any cells inside the region). Note that it does not override the
    // refinement constraints given by the nCellsBetweenLevels setting.
    limitRegions
    {
    }


    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the location(s)InMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    //
    // There are two different ways of specifying the regions to keep:
    // 1. a single locationInMesh. This is the unzoned part of the mesh.
    //    All the 'zoned' surfaces are marked as such
    //    in the refinementSurfaces with the faceZone and cellZone keywords.
    //    It is illegal to have the locationInMesh inside a surface for which
    //    a cellZone is specified.
    //
    // or
    //
    // 2. multiple locationsInMesh, with per location the name of the cellZone.
    //    This uses walking to determine zones and automatically creates
    //    faceZones on the outside of cellZones. The special name 'none' is
    //    used to indicate the unzoned/background part of the mesh.


        // Ad 1. Specify a single location and how to treat faces inbetween
        //       cellZones
        locationInMesh (0.0001 0.0001 0.0001);

        // Whether any faceZones (as specified in the refinementSurfaces)
        // are only on the boundary of corresponding cellZones.
        // Not used if there are no faceZones. The behaviour has changed
        // with respect to previous versions:
        //  true  : all intersections with surface are put in faceZone
        //          (same behaviour as before)
        //  false : depending on the type of surface intersected:
        //      - if intersecting surface has faceZone only (so no cellZone)
        //        leave in faceZone (so behave as if set to true) (= changed
        //        behaviour)
        //      - if intersecting surface has faceZone and cellZone
        //        remove if inbetween same cellZone or if on boundary
        //        (same behaviour as before)
        allowFreeStandingZoneFaces true;



        // 2. Specify multiple locations with optional cellZones for the
        //    regions (use cellZone "none" to specify the unzoned cells)
        //    FaceZones are automatically constructed from the
        //    names of the cellZones: <cellZoneA> _to_ <cellZoneB>
        //    where the cellZoneA is the lowest numbered cellZone (non-cellZone
        //    cells are in a special region called "none" which is always
        //    last).




    // Optional locations that should not be reachable from
    // location(s)InMesh
//    locationsOutsideMesh ((100 100 100));

    // Optional: do not remove cells likely to give snapping problems
    // handleSnapProblems false;

    // Optional: switch off topological test for cells to-be-squashed
    //           and use geometric test instead
    //useTopologicalSnapDetection false;

    // Optional: do not refine surface cells with opposite faces of
    //           differing refinement levels
    //interfaceRefine false;

    // Optional: use an erosion instead of region assignment to allocate
    //           left-over cells to the background region (i.e. make cellZones
    //           consistent with the intersections of the surface).
    //           Erosion is specified as a number of erosion iterations.
    //           Erosion has less chance of bleeding and changing the zone
    //           for a complete region.
    //nCellZoneErodeIter 2;
}

// Settings for the snapping.
snapControls
{
    // Number of patch smoothing iterations before finding correspondence
    // to surface
    nSmoothPatch 3;

    // Optional: number of smoothing iterations for internal points on
    // refinement interfaces. This will reduce non-orthogonality on
    // refinement interfaces.
    //nSmoothInternal $nSmoothPatch;

    // Maximum relative distance for points to be attracted by surface.
    // True distance is this factor times local maximum edge length.
    tolerance 1.0;

    // Number of mesh displacement relaxation iterations.
    nSolveIter 10;

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 5;

    // (wip) disable snapping to opposite near surfaces (revert to 22x
    //  behaviour)
    // detectNearSurfacesSnap false;


    // Feature snapping

        // Number of feature edge snapping iterations.
        // Leave out altogether to disable.
        nFeatureSnapIter 10;

        // Detect (geometric only) features by sampling the surface
        // (default=false).
        implicitFeatureSnap true;

        // Use castellatedMeshControls::features (default = true)
        explicitFeatureSnap false;

        // Detect features between multiple surfaces
        // (only for explicitFeatureSnap, default = false)
        multiRegionFeatureSnap false;


        //- When to run face splitting (never at first iteration, always
        //  at last iteration). Is interval. Default -1 (disabled)
        //nFaceSplitInterval 5;


        // (wip) Optional for explicit feature snapping:
        //- Detect baffle edges. Default is true.
        //detectBaffles false;
        //- On any faces where points are on multiple regions (see
        //  multiRegionFeatureSnap) have the other points follow these points
        //  instead of having their own independent movement, i.e. have snapping
        //  to multi-region edges/points take priority. This might aid snapping
        //  to sharp edges that are also region edges. The default is false.
        //releasePoints true;
        //- Walk along feature edges, adding missing ones. Default is true.
        //stringFeatures false;
        //- If diagonal attraction also attract other face points. Default is
        //  false
        //avoidDiagonal true;
        //- When splitting what concave faces to leave intact. Default is 45
        //  degrees.
        //concaveAngle 30;
        //- When splitting the minimum area ratio of faces. If face split
        //  causes ratio of area less than this do not split. Default is 0.3
        //minAreaRatio 0.3;
        //- Attract points only to the surface they originate from. Default
        //  false. This can improve snapping of intersecting surfaces.
        strictRegionSnap true;

}

// Settings for the layer addition.
addLayersControls
{
    // Are the thickness parameters below relative to the undistorted
    // size of the refined cell outside layer (true) or absolute sizes (false).
    relativeSizes true;

    // Layer thickness specification. This can be specified in one of following
    // ways:
    // - expansionRatio and finalLayerThickness (cell nearest internal mesh)
    // - expansionRatio and firstLayerThickness (cell on surface)
    // - overall thickness and firstLayerThickness
    // - overall thickness and finalLayerThickness
    // - overall thickness and expansionRatio
    //
    // Note: the mode thus selected is global, i.e. one cannot override the
    //       mode on a per-patch basis (only the values can be overridden)

        // Expansion factor for layer mesh
        expansionRatio 1.5;

        // Wanted thickness of the layer furthest away from the wall.
        // If relativeSizes this is relative to undistorted size of cell
        // outside layer.
        finalLayerThickness 0.3;

        // Wanted thickness of the layer next to the wall.
        // If relativeSizes this is relative to undistorted size of cell
        // outside layer.
        //firstLayerThickness 0.3;

        // Wanted overall thickness of layers.
        // If relativeSizes this is relative to undistorted size of cell
        // outside layer.
        //thickness 0.5


    // Minimum overall thickness of total layers. If for any reason layer
    // cannot be above minThickness do not add layer.
    // If relativeSizes this is relative to undistorted size of cell
    // outside layer..
    minThickness 0.1;


    // Per final patch or faceZone (so not geometry!) the layer information
    // Note: This behaviour changed after 21x. Any non-mentioned patches
    //       now slide unless:
    //          - nSurfaceLayers is explicitly mentioned to be 0.
    //          - angle to nearest surface < slipFeatureAngle (see below)
    layers
    {
    }

    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    // Note: changed(corrected) w.r.t 1.7.x! (didn't do anything in 1.7.x)
    nGrow -1;

    // Advanced settings


    // Static analysis of starting mesh

        // When not to extrude surface. 0 is flat surface, 90 is when two faces
        // are perpendicular. Note: was not working correctly < 1806
        featureAngle 180;

        // When to merge patch faces. Default is featureAngle. Useful when
        // featureAngle is large.
        //mergePatchFacesAngle 45;

        // Stop layer growth on highly warped cells
        maxFaceThicknessRatio 1000;//0.5;


    // Patch displacement

        // Number of smoothing iterations of surface normals
        nSmoothSurfaceNormals 1;

        // Smooth layer thickness over surface patches
        nSmoothThickness 10;



    // Choice of mesh shrinking algorithm

        // Optional mesh shrinking algorithm (default is displacementMedialAxis)
        // The displacementMotionSolver is a wrapper around the displacement
        // motion solvers. It needs specification of the solver to use and
        // its control dictionary.
        //meshShrinker displacementMotionSolver;
        //solver      multiDisplacement;
        //solvers
        //{
        //    displacementLaplacian
        //    {
        //        // Note that e.g. displacementLaplacian needs entries in
        //        // fvSchemes, fvSolution. Also specify a minIter > 1 when
        //        // solving
        //        // cellDisplacement since otherwise solution might not be
        //        // sufficiently accurate on points.
        //        solver              displacementLaplacian;
        //        diffusivity quadratic inverseDistance
        //        (
        //            aerofoil
        //        );
        //    }
        //    displacementPointSmoothing
        //    {
        //        ${_meshMotionSolver}
        //    }
        //}


    // Medial axis analysis (for use with default displacementMedialAxis)

        // Angle used to pick up medial axis points
        // Note: changed(corrected) w.r.t 1.7.x! 90 degrees corresponds to 130
        // in 1.7.x.
        minMedialAxisAngle 90;

        // Reduce layer growth where ratio thickness to medial
        // distance is large
        maxThicknessToMedialRatio 0.3;

        // Number of smoothing iterations of interior mesh movement direction
        nSmoothNormals 3;

        // Optional: limit the number of steps walking away from the surface.
        // Default is unlimited.
        //nMedialAxisIter 10;

        // Optional: smooth displacement after medial axis determination.
        // default is 0.
        //nSmoothDisplacement 90;

        // (wip)Optional: do not extrude any point where
        //   (false) : all surrounding faces are not fully extruded
        //   (true)  : all surrounding points are not extruded
        // Default is false.
        //detectExtrusionIsland true;

        // Optional: do not extrude around sharp edges if both faces are not
        // fully extruded i.e. if one of the faces on either side would
        // become a wedge.
        // Default is 0.5*featureAngle. Set to -180 always attempt extrusion
        //layerTerminationAngle 25;

        // Optional: disable shrinking of edges that have one (or two) points
        // on an extruded patch.
        // Default is false to enable single/two cell thick channels to still
        // have layers. In <=1806 this was true by default. On larger gaps it
        // should have no effect.
        //disableWallEdges true;

        // Optional: at non-patched sides allow mesh to slip if extrusion
        // direction makes angle larger than slipFeatureAngle. Default is
        // 0.5*featureAngle.
        slipFeatureAngle 10;

        // Maximum number of snapping relaxation iterations. Should stop
        // before upon reaching a correct mesh.
        nRelaxIter 5;


    // Mesh shrinking

        // Create buffer region for new layer terminations, i.e. gradually
        // step down number of layers. Set to <0 to terminate layer in one go.
        nBufferCellsNoExtrude 0;

        // Overall max number of layer addition iterations. The mesher will
        // exit if it reaches this number of iterations; possibly with an
        // illegal mesh.
        nLayerIter 50;

        // Max number of iterations after which relaxed meshQuality controls
        // get used. Up to nRelaxedIter it uses the settings in
        // meshQualityControls,
        // after nRelaxedIter it uses the values in
        // meshQualityControls::relaxed.
        nRelaxedIter 0;

        // Additional reporting: if there are just a few faces where there
        // are mesh errors (after adding the layers) print their face centres.
        // This helps in tracking down problematic mesh areas.
        //additionalReporting true;
}

// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    // Specify mesh quality constraints in separate dictionary so can
    // be reused (e.g. checkMesh -meshQuality)
    #include "meshQualityDict"

    minDeterminant 1e-8;

    // Optional : some meshing phases allow usage of relaxed rules.
    // See e.g. addLayersControls::nRelaxedIter.
    relaxed
    {
        // Maximum non-orthogonality allowed. Set to 180 to disable.
        maxNonOrtho 75;
        minTetQuality -1e30;
        minTwist    -1;
    }


    // Advanced

        // Number of error distribution iterations
        nSmoothScale 4;
        // amount to scale back displacement at error points
        errorReduction 0.75;
}

// Advanced

//// Debug flags
//debugFlags
//(
//    mesh            // write intermediate meshes
//    intersections   // write current mesh intersections as .obj files
//    featureSeeds    // write information about explicit feature edge
//                    // refinement
//    attraction      // write attraction as .obj files
//    layerInfo       // write information about layers
//);
//
//// Write flags
//writeFlags
//(
//    scalarLevels    // write volScalarField with cellLevel for postprocessing
//    layerSets       // write cellSets, faceSets of faces in layer
//    layerFields     // write volScalarField for layer coverage
//);


//// Format for writing lines. E.g. leak path. Default is vtk format.
//setFormat ensight;

// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-6;

// ************************************************************************* //
