/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2412                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   0.001;

vertices
(
    (-50 -5 0)
    (0 -5 0)
    (200 -5 0)
    (-50 5 0)
    (0 5 0)
    (200 5 0)
    (-50 -5 1)
    (0 -5 1)
    (200 -5 1)
    (-50 5 1)
    (0 5 1)
    (200 5 1)
);

blocks
(
    hex (0 1 4 3 6 7 10 9) (50 20 1) simpleGrading 
        (
        1                  // x-direction expansion ratio
        (
            (0.2 0.3 4)    // 20% y-dir, 30% cells, expansion = 4
            (0.6 0.4 1)    // 60% y-dir, 40% cells, expansion = 1
            (0.2 0.3 0.25) // 20% y-dir, 30% cells, expansion = 0.25 (1/4)
        )
        1
    )
    hex (1 2 5 4 7 8 11 10) (200 20 1) simpleGrading 
        (
        1                  // x-direction expansion ratio
        (
            (0.2 0.3 4)    // 20% y-dir, 30% cells, expansion = 4
            (0.6 0.4 1)    // 60% y-dir, 40% cells, expansion = 1
            (0.2 0.3 0.25) // 20% y-dir, 30% cells, expansion = 0.25 (1/4)
        )
        1
    )
);

edges
();

boundary
(
    inlet
    {
        type mappedPatch;
        offset          (0.01 0 0);
        sampleMode      nearestCell;
        faces
        (
            (0 6 9 3)  //inlet
        );
    }

    outlet
    {
        type patch;
        faces
        (
            (2 5 11 8)  //outlet
        );
    }

    walls_top
    {
        type wall;
        faces
        (
            (4 10 11 5)  //top
        );
    }

    walls_bottom
    {
        type wall;
        faces
        (
            (1 2 8 7)  //bottom
        );
    }

    upstream
    {
        type wall;
        faces
        (
            (3 9 10 4)  //upstream
            (0 1 7 6)  //upstream
        );
    }

    back
    {
        type wall;
        faces
        (
            (0 3 4 1)  //back
            (1 4 5 2)  //back
        );
    }
    front
    {
        type wall;
        faces
        (
            (6 7 10 9)  //front
            (7 8 11 10)  //front
        );
    }
);


// ************************************************************************* //
